"use strict";
(self["webpackChunk"] = self["webpackChunk"] || []).push([["node_modules_thirdweb-dev_sdk_dist_edition-drop-b3a7e576_browser_esm_js"],{

/***/ "./node_modules/@thirdweb-dev/sdk/dist/edition-drop-b3a7e576.browser.esm.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/sdk/dist/edition-drop-b3a7e576.browser.esm.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EditionDrop: () => (/* binding */ EditionDrop)
/* harmony export */ });
/* harmony import */ var _QueryParams_ca1fafc2_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./QueryParams-ca1fafc2.browser.esm.js */ "./node_modules/@thirdweb-dev/sdk/dist/QueryParams-ca1fafc2.browser.esm.js");
/* harmony import */ var _contract_publisher_49845f13_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./contract-publisher-49845f13.browser.esm.js */ "./node_modules/@thirdweb-dev/sdk/dist/contract-publisher-49845f13.browser.esm.js");
/* harmony import */ var _drop_erc1155_history_19959ca7_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./drop-erc1155-history-19959ca7.browser.esm.js */ "./node_modules/@thirdweb-dev/sdk/dist/drop-erc1155-history-19959ca7.browser.esm.js");
/* harmony import */ var _erc_1155_standard_1ef302b8_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./erc-1155-standard-1ef302b8.browser.esm.js */ "./node_modules/@thirdweb-dev/sdk/dist/erc-1155-standard-1ef302b8.browser.esm.js");
/* harmony import */ var _thirdweb_checkout_3f27cda7_browser_esm_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./thirdweb-checkout-3f27cda7.browser.esm.js */ "./node_modules/@thirdweb-dev/sdk/dist/thirdweb-checkout-3f27cda7.browser.esm.js");
/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ethers */ "./node_modules/@ethersproject/constants/lib.esm/addresses.js");
/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tiny-invariant */ "./node_modules/tiny-invariant/dist/esm/tiny-invariant.js");
/* harmony import */ var merkletreejs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! merkletreejs */ "./node_modules/merkletreejs/dist/index.js");
/* harmony import */ var merkletreejs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(merkletreejs__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fast-deep-equal */ "./node_modules/fast-deep-equal/index.js");
/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(fast_deep_equal__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! bs58 */ "./node_modules/bs58/index.js");
/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(bs58__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! eventemitter3 */ "./node_modules/eventemitter3/index.mjs");
/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! cross-fetch */ "./node_modules/cross-fetch/dist/browser-ponyfill.js");
/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_6__);














































































/**
 * Setup a collection of NFTs with a customizable number of each NFT that are minted as users claim them.
 *
 * @example
 *
 * ```javascript
 * import { ThirdwebSDK } from "@thirdweb-dev/sdk";
 *
 * const sdk = new ThirdwebSDK("{{chainName}}");
 * const contract = await sdk.getContract("{{contract_address}}", "edition-drop");
 * ```
 *
 * @public
 */
class EditionDrop extends _erc_1155_standard_1ef302b8_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.S {
  /**
   * Configure royalties
   * @remarks Set your own royalties for the entire contract or per token
   * @example
   * ```javascript
   * // royalties on the whole contract
   * contract.royalties.setDefaultRoyaltyInfo({
   *   seller_fee_basis_points: 100, // 1%
   *   fee_recipient: "0x..."
   * });
   * // override royalty for a particular token
   * contract.royalties.setTokenRoyaltyInfo(tokenId, {
   *   seller_fee_basis_points: 500, // 5%
   *   fee_recipient: "0x..."
   * });
   * ```
   */

  /**
   * Configure claim conditions for each NFT
   * @remarks Define who can claim each NFT in the edition, when and how many.
   * @example
   * ```javascript
   * const presaleStartTime = new Date();
   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);
   * const claimConditions = [
   *   {
   *     startTime: presaleStartTime, // start the presale now
   *     maxClaimableSupply: 2, // limit how many mints for this presale
   *     price: 0.01, // presale price
   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses
   *   },
   *   {
   *     startTime: publicSaleStartTime, // 24h after presale, start public sale
   *     price: 0.08, // public sale price
   *   }
   * ]);
   *
   * const tokenId = 0; // the id of the NFT to set claim conditions on
   * await contract.claimConditions.set(tokenId, claimConditions);
   * ```
   */

  /**
   * Checkout
   * @remarks Create a FIAT currency checkout for your NFT drop.
   */

  constructor(network, _address, storage) {
    var _this;
    let _options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    let abi = arguments.length > 4 ? arguments[4] : undefined;
    let chainId = arguments.length > 5 ? arguments[5] : undefined;
    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new _contract_publisher_49845f13_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.da(network, _address, abi, _options);
    super(contractWrapper, storage, chainId);
    _this = this;
    (0,_QueryParams_ca1fafc2_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(this, "abi", void 0);
    (0,_QueryParams_ca1fafc2_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(this, "sales", void 0);
    (0,_QueryParams_ca1fafc2_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(this, "platformFees", void 0);
    (0,_QueryParams_ca1fafc2_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(this, "encoder", void 0);
    (0,_QueryParams_ca1fafc2_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(this, "estimator", void 0);
    (0,_QueryParams_ca1fafc2_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(this, "events", void 0);
    (0,_QueryParams_ca1fafc2_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(this, "metadata", void 0);
    (0,_QueryParams_ca1fafc2_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(this, "app", void 0);
    (0,_QueryParams_ca1fafc2_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(this, "roles", void 0);
    (0,_QueryParams_ca1fafc2_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(this, "royalties", void 0);
    (0,_QueryParams_ca1fafc2_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(this, "claimConditions", void 0);
    (0,_QueryParams_ca1fafc2_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(this, "checkout", void 0);
    (0,_QueryParams_ca1fafc2_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(this, "history", void 0);
    (0,_QueryParams_ca1fafc2_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(this, "interceptor", void 0);
    (0,_QueryParams_ca1fafc2_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(this, "owner", void 0);
    /** ******************************
     * WRITE FUNCTIONS
     *******************************/
    /**
     * Create a batch of NFTs to be claimed in the future
     *
     * @remarks Create batch allows you to create a batch of many NFTs in one transaction.
     *
     * @example
     * ```javascript
     * // Custom metadata of the NFTs to create
     * const metadatas = [{
     *   name: "Cool NFT",
     *   description: "This is a cool NFT",
     *   image: fs.readFileSync("path/to/image.png"), // This can be an image url or file
     * }, {
     *   name: "Cool NFT",
     *   description: "This is a cool NFT",
     *   image: fs.readFileSync("path/to/image.png"),
     * }];
     *
     * const results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain
     * const firstTokenId = results[0].id; // token id of the first created NFT
     * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT
     * ```
     *
     * @param metadatas - The metadata to include in the batch.
     * @param options - optional upload progress callback
     */
    (0,_QueryParams_ca1fafc2_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(this, "createBatch", /* @__PURE__ */(0,_contract_publisher_49845f13_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.d3)(async (metadatas, options) => {
      return this.erc1155.lazyMint.prepare(metadatas, options);
    }));
    /**
     * Claim NFTs to a specific Wallet
     *
     * @remarks Let the specified wallet claim NFTs.
     *
     * @example
     * ```javascript
     * const address = "{{wallet_address}}"; // address of the wallet you want to claim the NFTs
     * const tokenId = 0; // the id of the NFT you want to claim
     * const quantity = 1; // how many NFTs you want to claim
     *
     * const tx = await contract.claimTo(address, tokenId, quantity);
     * const receipt = tx.receipt; // the transaction receipt
     * ```
     *
     * @param destinationAddress - Address you want to send the token to
     * @param tokenId - Id of the token you want to claim
     * @param quantity - Quantity of the tokens you want to claim
     * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer
     * @param proofs - Array of proofs
     *
     * @returns - Receipt for the transaction
     */
    (0,_QueryParams_ca1fafc2_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(this, "claimTo", /* @__PURE__ */(0,_contract_publisher_49845f13_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.d3)(async function (destinationAddress, tokenId, quantity) {
      let checkERC20Allowance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      return _this.erc1155.claimTo.prepare(destinationAddress, tokenId, quantity, {
        checkERC20Allowance
      });
    }));
    /**
     * Claim a token to the connected wallet
     *
     * @remarks See {@link EditionDrop.claimTo}
     *
     * @param tokenId - Id of the token you want to claim
     * @param quantity - Quantity of the tokens you want to claim
     * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer
     * @param proofs - Array of proofs
     *
     * @returns - Receipt for the transaction
     */
    (0,_QueryParams_ca1fafc2_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(this, "claim", /* @__PURE__ */(0,_contract_publisher_49845f13_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.d3)(async function (tokenId, quantity) {
      let checkERC20Allowance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      const address = await _this.contractWrapper.getSignerAddress();
      return _this.claimTo.prepare(address, tokenId, quantity, checkERC20Allowance);
    }));
    /**
     * Burn a specified amount of a NFT
     *
     * @param tokenId - the token Id to burn
     * @param amount - amount to burn
     *
     * @example
     * ```javascript
     * const result = await contract.burnTokens(tokenId, amount);
     * ```
     */
    (0,_QueryParams_ca1fafc2_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(this, "burnTokens", /* @__PURE__ */(0,_contract_publisher_49845f13_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.d3)(async (tokenId, amount) => {
      return this.erc1155.burn.prepare(tokenId, amount);
    }));
    this.abi = _contract_publisher_49845f13_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.e.parse(abi);
    this.metadata = new _contract_publisher_49845f13_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.ag(this.contractWrapper, _contract_publisher_49845f13_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.dl, this.storage);
    this.app = new _contract_publisher_49845f13_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.a$(this.contractWrapper, this.metadata, this.storage);
    this.roles = new _contract_publisher_49845f13_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.ah(this.contractWrapper, EditionDrop.contractRoles);
    this.royalties = new _contract_publisher_49845f13_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.ai(this.contractWrapper, this.metadata);
    this.sales = new _contract_publisher_49845f13_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.aj(this.contractWrapper);
    this.claimConditions = new _contract_publisher_49845f13_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.am(this.contractWrapper, this.metadata, this.storage);
    this.events = new _contract_publisher_49845f13_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.aQ(this.contractWrapper);
    this.history = new _drop_erc1155_history_19959ca7_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__.D(this.events);
    this.encoder = new _contract_publisher_49845f13_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.af(this.contractWrapper);
    this.estimator = new _contract_publisher_49845f13_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.aP(this.contractWrapper);
    this.platformFees = new _contract_publisher_49845f13_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.aS(this.contractWrapper);
    this.interceptor = new _contract_publisher_49845f13_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.aR(this.contractWrapper);
    this.checkout = new _thirdweb_checkout_3f27cda7_browser_esm_js__WEBPACK_IMPORTED_MODULE_11__.a(this.contractWrapper);
    this.owner = new _contract_publisher_49845f13_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.aU(this.contractWrapper);
  }

  /**
   * @internal
   */
  onNetworkUpdated(network) {
    this.contractWrapper.updateSignerOrProvider(network);
  }
  getAddress() {
    return this.contractWrapper.readContract.address;
  }

  /** ******************************
   * READ FUNCTIONS
   *******************************/

  // TODO getAllClaimerAddresses() - should be done via an indexer

  /**
   * Get all NFTs
   *
   * @remarks Get all the data associated with every NFT in this contract.
   *
   * By default, returns the first 100 NFTs, use queryParams to fetch more.
   *
   * @example
   * ```javascript
   * const nfts = await contract.getAll();
   * ```
   * @param queryParams - optional filtering to only fetch a subset of results.
   * @returns The NFT metadata for all NFTs queried.
   */
  async getAll(queryParams) {
    return this.erc1155.getAll(queryParams);
  }

  /**
   * Get all NFTs owned by a specific wallet
   *
   * @remarks Get all the data associated with the NFTs owned by a specific wallet.
   *
   * @example
   * ```javascript
   * // Address of the wallet to get the NFTs of
   * const address = "{{wallet_address}}";
   * const nfts = await contract.getOwned(address);
   * ```
   *
   * @returns The NFT metadata for all NFTs in the contract.
   */
  async getOwned(walletAddress) {
    return this.erc1155.getOwned(walletAddress);
  }

  /**
   * Get the number of NFTs minted
   * @returns the total number of NFTs minted in this contract
   * @public
   */
  async getTotalCount() {
    return this.erc1155.totalCount();
  }

  /**
   * Get whether users can transfer NFTs from this contract
   */
  async isTransferRestricted() {
    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole((0,_contract_publisher_49845f13_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.bG)("transfer"), ethers__WEBPACK_IMPORTED_MODULE_12__.AddressZero);
    return !anyoneCanTransfer;
  }
  /**
   * Construct a claim transaction without executing it.
   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.
   * @param destinationAddress - Address you want to send the token to
   * @param tokenId - Id of the token you want to claim
   * @param quantity - Quantity of the tokens you want to claim
   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer
   * @param claimData - Optional claim verification data (e.g. price, allowlist proof, etc...)
   *
   * @deprecated Use `contract.erc1155.claim.prepare(...args)` instead
   */
  async getClaimTransaction(destinationAddress, tokenId, quantity) {
    let checkERC20Allowance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
    return this.erc1155.getClaimTransaction(destinationAddress, tokenId, quantity, {
      checkERC20Allowance
    });
  }
  /**
   * @internal
   */
  async prepare(method, args, overrides) {
    return _contract_publisher_49845f13_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.aV.fromContractWrapper({
      contractWrapper: this.contractWrapper,
      method,
      args,
      overrides
    });
  }

  /**
   * @internal
   */
  async call(functionName, args, overrides) {
    return this.contractWrapper.call(functionName, args, overrides);
  }
}
(0,_QueryParams_ca1fafc2_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(EditionDrop, "contractRoles", ["admin", "minter", "transfer"]);




/***/ })

}]);