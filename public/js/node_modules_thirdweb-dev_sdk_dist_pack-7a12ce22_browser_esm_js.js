"use strict";
(self["webpackChunk"] = self["webpackChunk"] || []).push([["node_modules_thirdweb-dev_sdk_dist_pack-7a12ce22_browser_esm_js"],{

/***/ "./node_modules/@thirdweb-dev/sdk/dist/pack-7a12ce22.browser.esm.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/sdk/dist/pack-7a12ce22.browser.esm.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Pack": () => (/* binding */ Pack)
/* harmony export */ });
/* harmony import */ var _QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./QueryParams-7d9473b5.browser.esm.js */ "./node_modules/@thirdweb-dev/sdk/dist/QueryParams-7d9473b5.browser.esm.js");
/* harmony import */ var _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./watchTransactions-8ceed2d4.browser.esm.js */ "./node_modules/@thirdweb-dev/sdk/dist/watchTransactions-8ceed2d4.browser.esm.js");
/* harmony import */ var _erc_1155_standard_60f7907c_browser_esm_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./erc-1155-standard-60f7907c.browser.esm.js */ "./node_modules/@thirdweb-dev/sdk/dist/erc-1155-standard-60f7907c.browser.esm.js");
/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_ERC20_json__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/ERC20.json */ "./node_modules/@thirdweb-dev/contracts-js/dist/abis/ERC20.json");
/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IPackVRFDirect_json__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json */ "./node_modules/@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json");
/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ethers */ "./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js");
/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ethers */ "./node_modules/@ethersproject/units/lib.esm/index.js");
/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ethers */ "./node_modules/@ethersproject/constants/lib.esm/addresses.js");
/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! zod */ "./node_modules/zod/lib/index.mjs");
/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bs58 */ "./node_modules/bs58/index.js");
/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bs58__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! eventemitter3 */ "./node_modules/@thirdweb-dev/sdk/node_modules/eventemitter3/index.mjs");
/* harmony import */ var _thirdweb_dev_storage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @thirdweb-dev/storage */ "./node_modules/@thirdweb-dev/storage/dist/thirdweb-dev-storage.browser.esm.js");
/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! cross-fetch */ "./node_modules/cross-fetch/dist/browser-ponyfill.js");
/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tiny-invariant */ "./node_modules/tiny-invariant/dist/esm/tiny-invariant.js");
/* harmony import */ var merkletreejs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! merkletreejs */ "./node_modules/merkletreejs/dist/index.js");
/* harmony import */ var merkletreejs__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(merkletreejs__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! fast-deep-equal */ "./node_modules/fast-deep-equal/index.js");
/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(fast_deep_equal__WEBPACK_IMPORTED_MODULE_7__);












































































/**
 * @internal
 */
const CommonWrappableSchema = zod__WEBPACK_IMPORTED_MODULE_8__.z.object({
  contractAddress: _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.aa
});

/**
 * @internal
 */
const ERC20WrappableSchema = CommonWrappableSchema.extend({
  quantity: _QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__.A
});

/**
 * @internal
 */
const ERC721WrappableSchema = CommonWrappableSchema.extend({
  tokenId: _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.a7
});

/**
 * @internal
 */
const ERC1155WrappableSchema = CommonWrappableSchema.extend({
  tokenId: _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.a7,
  quantity: _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.a7
});

/**
 * @internal
 */
const ERC20RewardSchema = ERC20WrappableSchema.omit({
  quantity: true
}).extend({
  quantityPerReward: _QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__.A
});

/**
 * @internal
 */
const ERC721RewardSchema = ERC721WrappableSchema;

/**
 * @internal
 */
const ERC1155RewardSchema = ERC1155WrappableSchema.omit({
  quantity: true
}).extend({
  quantityPerReward: _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.a7
});

/**
 * @internal
 */
const ERC20RewardContentsSchema = ERC20RewardSchema.extend({
  totalRewards: _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.a7["default"]("1")
});

/**
 * @internal
 */
const ERC721RewardContentsSchema = ERC721RewardSchema;

/**
 * @internal
 */
const ERC1155RewardContentsSchema = ERC1155RewardSchema.extend({
  totalRewards: _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.a7["default"]("1")
});

/**
 * @internal
 */
zod__WEBPACK_IMPORTED_MODULE_8__.z.object({
  erc20Rewards: zod__WEBPACK_IMPORTED_MODULE_8__.z.array(ERC20RewardSchema).default([]),
  erc721Rewards: zod__WEBPACK_IMPORTED_MODULE_8__.z.array(ERC721RewardSchema).default([]),
  erc1155Rewards: zod__WEBPACK_IMPORTED_MODULE_8__.z.array(ERC1155RewardSchema).default([])
});

/**
 * @internal
 */
const PackRewardsOutputSchema = zod__WEBPACK_IMPORTED_MODULE_8__.z.object({
  erc20Rewards: zod__WEBPACK_IMPORTED_MODULE_8__.z.array(ERC20RewardContentsSchema).default([]),
  erc721Rewards: zod__WEBPACK_IMPORTED_MODULE_8__.z.array(ERC721RewardContentsSchema).default([]),
  erc1155Rewards: zod__WEBPACK_IMPORTED_MODULE_8__.z.array(ERC1155RewardContentsSchema).default([])
});

/**
 * @internal
 */
const PackMetadataInputSchema = PackRewardsOutputSchema.extend({
  packMetadata: _QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__.N,
  rewardsPerPack: _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.a7["default"]("1"),
  openStartTime: _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.ab["default"](new Date())
});

/**
 * @public
 */

class PackVRF {
  constructor(network, address, storage, options, chainId) {
    var _this = this;
    let contractWrapper = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.c_(network, address, _thirdweb_dev_contracts_js_dist_abis_IPackVRFDirect_json__WEBPACK_IMPORTED_MODULE_11__, options);
    (0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, "featureName", _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.da.name);
    (0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, "contractWrapper", void 0);
    (0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, "storage", void 0);
    (0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, "chainId", void 0);
    (0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, "events", void 0);
    /**
     * Open pack
     *
     * @example
     * ```javascript
     * const tokenId = 0;
     * const amount = 1;
     * const receipt = await contract.pack.open(tokenId, amount);
     * ```
     *
     * @remarks Open a pack using Chainlink VRFs random number generation
     * @remarks This will return a transaction result with the requestId of the open request, NOT the contents of the pack
     * @remarks To get the contents of the pack, you must call claimRewards once the VRF request has been fulfilled
     * @remarks You can use the canClaimRewards method to check if the VRF request has been fulfilled
     * @param tokenId
     * @param amount
     * @returns
     * @twfeature PackVRF
     */
    (0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, "open", (0,_watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.cS)(async function (tokenId) {
      let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;
      return _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.aT.fromContractWrapper({
        contractWrapper: _this.contractWrapper,
        method: "openPack",
        args: [tokenId, amount],
        overrides: {
          // Higher gas limit for opening packs
          gasLimit
        },
        parse: receipt => {
          let id = ethers__WEBPACK_IMPORTED_MODULE_12__.BigNumber.from(0);
          try {
            const event = _this.contractWrapper.parseLogs("PackOpenRequested", receipt?.logs);
            id = event[0].args.requestId;
          } catch (e) {}
          return {
            receipt,
            id
          };
        }
      });
    }));
    /**
     * Claim the rewards from an opened pack
     *
     * @example
     * ```javascript
     * const rewards = await contract.pack.claimRewards();
     * ```
     *
     * @remarks This will return the contents of the pack
     * @remarks Make sure to check if the VRF request has been fulfilled using canClaimRewards() before calling this method
     * @returns the random rewards from opening a pack
     * @twfeature PackVRF
     */
    (0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, "claimRewards", (0,_watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.cS)(async function () {
      let gasLimit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 500000;
      return _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.aT.fromContractWrapper({
        contractWrapper: _this.contractWrapper,
        method: "claimRewards",
        args: [],
        overrides: {
          // Higher gas limit for opening packs
          gasLimit
        },
        parse: async receipt => {
          const event = _this.contractWrapper.parseLogs("PackOpened", receipt?.logs);
          if (event.length === 0) {
            throw new Error("PackOpened event not found");
          }
          const rewards = event[0].args.rewardUnitsDistributed;
          return await _this.parseRewards(rewards);
        }
      });
    }));
    this.contractWrapper = contractWrapper;
    this.storage = storage;
    this.chainId = chainId;
    this.events = new _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.aO(this.contractWrapper);
  }
  onNetworkUpdated(network) {
    this.contractWrapper.updateSignerOrProvider(network);
  }
  getAddress() {
    return this.contractWrapper.readContract.address;
  }
  async parseRewards(rewards) {
    const erc20Rewards = [];
    const erc721Rewards = [];
    const erc1155Rewards = [];
    for (const reward of rewards) {
      switch (reward.tokenType) {
        case 0:
          {
            const tokenMetadata = await (0,_watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.bV)(this.contractWrapper.getProvider(), reward.assetContract);
            erc20Rewards.push({
              contractAddress: reward.assetContract,
              quantityPerReward: ethers__WEBPACK_IMPORTED_MODULE_13__.formatUnits(reward.totalAmount, tokenMetadata.decimals).toString()
            });
            break;
          }
        case 1:
          {
            erc721Rewards.push({
              contractAddress: reward.assetContract,
              tokenId: reward.tokenId.toString()
            });
            break;
          }
        case 2:
          {
            erc1155Rewards.push({
              contractAddress: reward.assetContract,
              tokenId: reward.tokenId.toString(),
              quantityPerReward: reward.totalAmount.toString()
            });
            break;
          }
      }
    }
    return {
      erc20Rewards,
      erc721Rewards,
      erc1155Rewards
    };
  }

  /**
   * Setup a listener for when a pack is opened
   *
   * @example
   * ```javascript
   * const unsubscribe = await contract.pack.addPackOpenEventListener((packId, openerAddress, rewards) => {
   *  console.log(`Pack ${packId} was opened by ${openerAddress} and contained:`, rewards);
   * });
   * @param callback the listener to call when a pack is opened
   * @returns a unsubscribe function to cleanup the listener
   * @twfeature PackVRF
   */
  async addPackOpenEventListener(callback) {
    return this.events.addEventListener("PackOpened", async event => {
      callback(event.data.packId.toString(), event.data.opener, await this.parseRewards(event.data.rewardUnitsDistributed));
    });
  }

  /**
   * Check if a specific wallet can claim rewards after opening a pack
   *
   * @example
   * ```javascript
   * const canClaim = await contract.pack.canClaimRewards("{{wallet_address}}");
   * ```
   * @param claimerAddress Optional: the address to check if they can claim rewards, defaults to the connected address
   * @returns whether the connected address can claim rewards after opening a pack
   * @twfeature PackVRF
   */
  async canClaimRewards(claimerAddress) {
    const address = await (0,_watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.cT)(claimerAddress || (await this.contractWrapper.getSignerAddress()));
    return await this.contractWrapper.readContract.canClaimRewards(address);
  }

  /**
   * Open a pack and claim the rewards
   * @remarks This function will only start the flow of opening a pack, the rewards will be granted automatically to the connected address after VRF request is fulfilled
   *
   * @example
   * ```javascript
   * const packId = 0;
   * const amount = 1;
   * const { id } = await contract.pack.openAndClaim(packId, amount);
   * ```
   *
   * @param packId The id of the pack to open
   * @param amount Optional: the amount of packs to open, defaults to 1
   * @param gasLimit Optional: the gas limit to use for the VRF callback transaction, defaults to 500000
   * @returns
   * @twfeature PackVRF
   */
  async openAndClaim(packId) {
    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;
    const receipt = await this.contractWrapper.sendTransaction("openPackAndClaimRewards", [packId, amount, gasLimit], {
      // Higher gas limit for opening packs
      gasLimit: ethers__WEBPACK_IMPORTED_MODULE_12__.BigNumber.from(500000)
    });
    let id = ethers__WEBPACK_IMPORTED_MODULE_12__.BigNumber.from(0);
    try {
      const event = this.contractWrapper.parseLogs("PackOpenRequested", receipt?.logs);
      id = event[0].args.requestId;
    } catch (e) {}
    return {
      receipt,
      id
    };
  }

  /**
   * Get the LINK balance of the contract
   *
   * @example
   * ```javascript
   * const balance = await contract.pack.getLinkBalance();
   * ```
   *
   * @returns the balance of LINK in the contract
   * @twfeature PackVRF
   */
  async getLinkBalance() {
    return this.getLinkContract().balanceOf(this.contractWrapper.readContract.address);
  }

  /**
   * Transfer LINK to this contract
   *
   * @example
   * ```javascript
   * const amount = 1;
   * await contract.pack.transferLink(amount);
   * ```
   *
   * @param amount the amount of LINK to transfer to the contract
   * @twfeature PackVRF
   */
  async transferLink(amount) {
    await this.getLinkContract().transfer(this.contractWrapper.readContract.address, amount);
  }
  getLinkContract() {
    const linkAddress = _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.ch[this.chainId];
    if (!linkAddress) {
      throw new Error(`No LINK token address found for chainId ${this.chainId}`);
    }
    const contract = new _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.c_(this.contractWrapper.getSignerOrProvider(), linkAddress, _thirdweb_dev_contracts_js_dist_abis_ERC20_json__WEBPACK_IMPORTED_MODULE_14__, this.contractWrapper.options);
    return new _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.ao(contract, this.storage, this.chainId);
  }
}

/**
 * Create lootboxes of NFTs with rarity based open mechanics.
 *
 * @example
 *
 * ```javascript
 * import { ThirdwebSDK } from "@thirdweb-dev/sdk";
 *
 * const sdk = new ThirdwebSDK("{{chainName}}");
 * const contract = await sdk.getContract("{{contract_address}}", "pack");
 * ```
 *
 * @public
 */
class Pack extends _erc_1155_standard_60f7907c_browser_esm_js__WEBPACK_IMPORTED_MODULE_15__.S {
  /**
   * Configure royalties
   * @remarks Set your own royalties for the entire contract or per pack
   * @example
   * ```javascript
   * // royalties on the whole contract
   * contract.royalties.setDefaultRoyaltyInfo({
   *   seller_fee_basis_points: 100, // 1%
   *   fee_recipient: "0x..."
   * });
   * // override royalty for a particular pack
   * contract.royalties.setTokenRoyaltyInfo(packId, {
   *   seller_fee_basis_points: 500, // 5%
   *   fee_recipient: "0x..."
   * });
   * ```
   */

  /**
   * @internal
   */

  /**
   * If enabled in the contract, use the Chainlink VRF functionality to open packs
   */
  get vrf() {
    return (0,_watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.bM)(this._vrf, _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.da);
  }
  constructor(network, address, storage) {
    var _this;
    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    let abi = arguments.length > 4 ? arguments[4] : undefined;
    let chainId = arguments.length > 5 ? arguments[5] : undefined;
    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.c_(network, address, abi, options.gasless && "openzeppelin" in options.gasless ? {
      ...options,
      gasless: {
        openzeppelin: {
          ...options.gasless.openzeppelin,
          useEOAForwarder: true
        }
      }
    } : options);
    super(contractWrapper, storage, chainId);
    _this = this;
    (0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, "abi", void 0);
    (0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, "metadata", void 0);
    (0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, "app", void 0);
    (0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, "roles", void 0);
    (0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, "encoder", void 0);
    (0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, "events", void 0);
    (0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, "estimator", void 0);
    (0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, "royalties", void 0);
    (0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, "interceptor", void 0);
    (0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, "owner", void 0);
    (0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, "_vrf", void 0);
    /** ******************************
     * WRITE FUNCTIONS
     *******************************/
    /**
     * Create Pack
     * @remarks Create a new pack with the given metadata and rewards and mint it to the connected wallet.
     * @remarks See {@link Pack.createTo}
     *
     * @param metadataWithRewards - the metadata and rewards to include in the pack
     * @example
     * ```javascript
     * const pack = {
     *   // The metadata for the pack NFT itself
     *   packMetadata: {
     *     name: "My Pack",
     *     description: "This is a new pack",
     *     image: "ipfs://...",
     *   },
     *   // ERC20 rewards to be included in the pack
     *   erc20Rewards: [
     *     {
     *       assetContract: "0x...",
     *       quantityPerReward: 5,
     *       quantity: 100,
     *       totalRewards: 20,
     *     }
     *   ],
     *   // ERC721 rewards to be included in the pack
     *   erc721Rewards: [
     *     {
     *       assetContract: "0x...",
     *       tokenId: 0,
     *     }
     *   ],
     *   // ERC1155 rewards to be included in the pack
     *   erc1155Rewards: [
     *     {
     *       assetContract: "0x...",
     *       tokenId: 0,
     *       quantityPerReward: 1,
     *       totalRewards: 100,
     *     }
     *   ],
     *   openStartTime: new Date(), // the date that packs can start to be opened, defaults to now
     *   rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1
     * }
     *
     * const tx = await contract.create(pack);
     * ```
     */
    (0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, "create", (0,_watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.cS)(async metadataWithRewards => {
      const signerAddress = await this.contractWrapper.getSignerAddress();
      return this.createTo.prepare(signerAddress, metadataWithRewards);
    }));
    /**
     * Add Pack Contents
     * @remarks Add contents to an existing pack.
     * @remarks See {@link Pack.addPackContents}
     *
     * @param packId - token Id of the pack to add contents to
     * @param packContents - the rewards to include in the pack
     * @example
     * ```javascript
     * const packContents = {
     *   // ERC20 rewards to be included in the pack
     *   erc20Rewards: [
     *     {
     *       assetContract: "0x...",
     *       quantityPerReward: 5,
     *       quantity: 100,
     *       totalRewards: 20,
     *     }
     *   ],
     *   // ERC721 rewards to be included in the pack
     *   erc721Rewards: [
     *     {
     *       assetContract: "0x...",
     *       tokenId: 0,
     *     }
     *   ],
     *   // ERC1155 rewards to be included in the pack
     *   erc1155Rewards: [
     *     {
     *       assetContract: "0x...",
     *       tokenId: 0,
     *       quantityPerReward: 1,
     *       totalRewards: 100,
     *     }
     *   ],
     * }
     *
     * const tx = await contract.addPackContents(packId, packContents);
     * ```
     */
    (0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, "addPackContents", (0,_watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.cS)(async (packId, packContents) => {
      const signerAddress = await this.contractWrapper.getSignerAddress();
      const parsedContents = await PackRewardsOutputSchema.parseAsync(packContents);
      const {
        contents,
        numOfRewardUnits
      } = await this.toPackContentArgs(parsedContents);
      return _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.aT.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "addPackContents",
        args: [packId, contents, numOfRewardUnits, signerAddress],
        parse: receipt => {
          const event = this.contractWrapper.parseLogs("PackUpdated", receipt?.logs);
          if (event.length === 0) {
            throw new Error("PackUpdated event not found");
          }
          const id = event[0].args.packId;
          return {
            id: id,
            receipt,
            data: () => this.erc1155.get(id)
          };
        }
      });
    }));
    /**
     * Create Pack To Wallet
     * @remarks Create a new pack with the given metadata and rewards and mint it to the specified address.
     *
     * @param to - the address to mint the pack to
     * @param metadataWithRewards - the metadata and rewards to include in the pack
     *
     * @example
     * ```javascript
     * const pack = {
     *   // The metadata for the pack NFT itself
     *   packMetadata: {
     *     name: "My Pack",
     *     description: "This is a new pack",
     *     image: "ipfs://...",
     *   },
     *   // ERC20 rewards to be included in the pack
     *   erc20Rewards: [
     *     {
     *       assetContract: "0x...",
     *       quantityPerReward: 5,
     *       quantity: 100,
     *       totalRewards: 20,
     *     }
     *   ],
     *   // ERC721 rewards to be included in the pack
     *   erc721Rewards: [
     *     {
     *       assetContract: "0x...",
     *       tokenId: 0,
     *     }
     *   ],
     *   // ERC1155 rewards to be included in the pack
     *   erc1155Rewards: [
     *     {
     *       assetContract: "0x...",
     *       tokenId: 0,
     *       quantityPerReward: 1,
     *       totalRewards: 100,
     *     }
     *   ],
     *   openStartTime: new Date(), // the date that packs can start to be opened, defaults to now
     *   rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1
     * }
     *
     * const tx = await contract.createTo("0x...", pack);
     * ```
     */
    (0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, "createTo", (0,_watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.cS)(async (to, metadataWithRewards) => {
      const uri = await (0,_watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.d6)(metadataWithRewards.packMetadata, this.storage);
      const parsedMetadata = await PackMetadataInputSchema.parseAsync(metadataWithRewards);
      const {
        erc20Rewards,
        erc721Rewards,
        erc1155Rewards
      } = parsedMetadata;
      const rewardsData = {
        erc20Rewards,
        erc721Rewards,
        erc1155Rewards
      };
      const {
        contents,
        numOfRewardUnits
      } = await this.toPackContentArgs(rewardsData);
      return _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.aT.fromContractWrapper({
        contractWrapper: this.contractWrapper,
        method: "createPack",
        args: [contents, numOfRewardUnits, uri, parsedMetadata.openStartTime, parsedMetadata.rewardsPerPack, await (0,_watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.cT)(to)],
        parse: receipt => {
          const event = this.contractWrapper.parseLogs("PackCreated", receipt?.logs);
          if (event.length === 0) {
            throw new Error("PackCreated event not found");
          }
          const packId = event[0].args.packId;
          return {
            id: packId,
            receipt,
            data: () => this.erc1155.get(packId)
          };
        }
      });
    }));
    /**
     * Open Pack
     *
     * @remarks - Open a pack to reveal the contained rewards. This will burn the specified pack and
     * the contained assets will be transferred to the opening users wallet.
     *
     * @param tokenId - the token ID of the pack you want to open
     * @param amount - the amount of packs you want to open
     *
     * @example
     * ```javascript
     * const tokenId = 0
     * const amount = 1
     * const tx = await contract.open(tokenId, amount);
     * ```
     */
    (0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, "open", (0,_watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.cS)(async function (tokenId) {
      let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;
      if (_this._vrf) {
        throw new Error("This contract is using Chainlink VRF, use `contract.vrf.open()` or `contract.vrf.openAndClaim()` instead");
      }
      return _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.aT.fromContractWrapper({
        contractWrapper: _this.contractWrapper,
        method: "openPack",
        args: [tokenId, amount],
        overrides: {
          // Higher gas limit for opening packs
          gasLimit
        },
        parse: async receipt => {
          const event = _this.contractWrapper.parseLogs("PackOpened", receipt?.logs);
          if (event.length === 0) {
            throw new Error("PackOpened event not found");
          }
          const rewards = event[0].args.rewardUnitsDistributed;
          const erc20Rewards = [];
          const erc721Rewards = [];
          const erc1155Rewards = [];
          for (const reward of rewards) {
            switch (reward.tokenType) {
              case 0:
                {
                  const tokenMetadata = await (0,_watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.bV)(_this.contractWrapper.getProvider(), reward.assetContract);
                  erc20Rewards.push({
                    contractAddress: reward.assetContract,
                    quantityPerReward: ethers__WEBPACK_IMPORTED_MODULE_13__.formatUnits(reward.totalAmount, tokenMetadata.decimals).toString()
                  });
                  break;
                }
              case 1:
                {
                  erc721Rewards.push({
                    contractAddress: reward.assetContract,
                    tokenId: reward.tokenId.toString()
                  });
                  break;
                }
              case 2:
                {
                  erc1155Rewards.push({
                    contractAddress: reward.assetContract,
                    tokenId: reward.tokenId.toString(),
                    quantityPerReward: reward.totalAmount.toString()
                  });
                  break;
                }
            }
          }
          return {
            erc20Rewards,
            erc721Rewards,
            erc1155Rewards
          };
        }
      });
    }));
    this.abi = _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.e.parse(abi || []);
    this.metadata = new _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.ah(this.contractWrapper, _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.db, this.storage);
    this.app = new _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.aV(this.contractWrapper, this.metadata, this.storage);
    this.roles = new _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.ai(this.contractWrapper, Pack.contractRoles);
    this.royalties = new _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.aj(this.contractWrapper, this.metadata);
    this.encoder = new _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.ag(this.contractWrapper);
    this.estimator = new _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.aN(this.contractWrapper);
    this.events = new _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.aO(this.contractWrapper);
    this.interceptor = new _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.aP(this.contractWrapper);
    this.owner = new _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.aS(this.contractWrapper);
    this._vrf = this.detectVrf();
  }

  /**
   * @internal
   */
  onNetworkUpdated(network) {
    this.contractWrapper.updateSignerOrProvider(network);
    this._vrf?.onNetworkUpdated(network);
  }
  getAddress() {
    return this.contractWrapper.readContract.address;
  }

  /** ******************************
   * READ FUNCTIONS
   *******************************/

  /**
   * Get a single Pack
   *
   * @remarks Get all the data associated with every pack in this contract.
   *
   * By default, returns the first 100 packs, use queryParams to fetch more.
   *
   * @example
   * ```javascript
   * const pack = await contract.get(0);
   * console.log(packs;
   * ```
   */
  async get(tokenId) {
    return this.erc1155.get(tokenId);
  }

  /**
   * Get All Packs
   *
   * @remarks Get all the data associated with every pack in this contract.
   *
   * By default, returns the first 100 packs, use queryParams to fetch more.
   *
   * @example
   * ```javascript
   * const packs = await contract.getAll();
   * console.log(packs;
   * ```
   * @param queryParams - optional filtering to only fetch a subset of results.
   * @returns The pack metadata for all packs queried.
   */
  async getAll(queryParams) {
    return this.erc1155.getAll(queryParams);
  }

  /**
   * Get Owned Packs
   *
   * @remarks Get all the data associated with the packs owned by a specific wallet.
   *
   * @example
   * ```javascript
   * // Address of the wallet to get the packs of
   * const address = "{{wallet_address}}";
   * const packss = await contract.getOwned(address);
   * ```
   *
   * @returns The pack metadata for all the owned packs in the contract.
   */
  async getOwned(walletAddress) {
    return this.erc1155.getOwned(walletAddress);
  }

  /**
   * Get the number of packs created
   * @returns the total number of packs minted in this contract
   * @public
   */
  async getTotalCount() {
    return this.erc1155.totalCount();
  }

  /**
   * Get whether users can transfer packs from this contract
   */
  async isTransferRestricted() {
    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole((0,_watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.bp)("transfer"), ethers__WEBPACK_IMPORTED_MODULE_16__.AddressZero);
    return !anyoneCanTransfer;
  }

  /**
   * Get Pack Contents
   * @remarks Get the rewards contained inside a pack.
   *
   * @param packId - The id of the pack to get the contents of.
   * @returns - The contents of the pack.
   *
   * @example
   * ```javascript
   * const packId = 0;
   * const contents = await contract.getPackContents(packId);
   * console.log(contents.erc20Rewards);
   * console.log(contents.erc721Rewards);
   * console.log(contents.erc1155Rewards);
   * ```
   */
  async getPackContents(packId) {
    const {
      contents,
      perUnitAmounts
    } = await this.contractWrapper.readContract.getPackContents(packId);
    const erc20Rewards = [];
    const erc721Rewards = [];
    const erc1155Rewards = [];
    for (let i = 0; i < contents.length; i++) {
      const reward = contents[i];
      const amount = perUnitAmounts[i];
      switch (reward.tokenType) {
        case 0:
          {
            const tokenMetadata = await (0,_watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.bV)(this.contractWrapper.getProvider(), reward.assetContract);
            const quantityPerReward = ethers__WEBPACK_IMPORTED_MODULE_13__.formatUnits(amount, tokenMetadata.decimals);
            const totalRewards = ethers__WEBPACK_IMPORTED_MODULE_13__.formatUnits(ethers__WEBPACK_IMPORTED_MODULE_12__.BigNumber.from(reward.totalAmount).div(amount), tokenMetadata.decimals);
            erc20Rewards.push({
              contractAddress: reward.assetContract,
              quantityPerReward,
              totalRewards
            });
            break;
          }
        case 1:
          {
            erc721Rewards.push({
              contractAddress: reward.assetContract,
              tokenId: reward.tokenId.toString()
            });
            break;
          }
        case 2:
          {
            erc1155Rewards.push({
              contractAddress: reward.assetContract,
              tokenId: reward.tokenId.toString(),
              quantityPerReward: amount.toString(),
              totalRewards: ethers__WEBPACK_IMPORTED_MODULE_12__.BigNumber.from(reward.totalAmount).div(amount).toString()
            });
            break;
          }
      }
    }
    return {
      erc20Rewards,
      erc721Rewards,
      erc1155Rewards
    };
  }
  /** *****************************
   * PRIVATE FUNCTIONS
   *******************************/

  async toPackContentArgs(metadataWithRewards) {
    const contents = [];
    const numOfRewardUnits = [];
    const {
      erc20Rewards,
      erc721Rewards,
      erc1155Rewards
    } = metadataWithRewards;
    const provider = this.contractWrapper.getProvider();
    const owner = await this.contractWrapper.getSignerAddress();
    for (const erc20 of erc20Rewards) {
      const normalizedQuantity = await (0,_watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.bU)(provider, erc20.quantityPerReward, erc20.contractAddress);
      // Multiply the quantity of one reward by the number of rewards
      const totalQuantity = normalizedQuantity.mul(erc20.totalRewards);
      const hasAllowance = await (0,_watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.bZ)(this.contractWrapper, erc20.contractAddress, totalQuantity);
      if (!hasAllowance) {
        throw new Error(`ERC20 token with contract address "${erc20.contractAddress}" does not have enough allowance to transfer.\n\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\n\nawait sdk.getToken("${erc20.contractAddress}").setAllowance("${this.getAddress()}", ${totalQuantity});\n\n`);
      }
      numOfRewardUnits.push(erc20.totalRewards);
      contents.push({
        assetContract: erc20.contractAddress,
        tokenType: 0,
        totalAmount: totalQuantity,
        tokenId: 0
      });
    }
    for (const erc721 of erc721Rewards) {
      const isApproved = await (0,_watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.cW)(this.contractWrapper.getProvider(), this.getAddress(), erc721.contractAddress, erc721.tokenId, owner);
      if (!isApproved) {
        throw new Error(`ERC721 token "${erc721.tokenId}" with contract address "${erc721.contractAddress}" is not approved for transfer.\n\nYou can give approval the multiwrap contract to transfer this token by running:\n\nawait sdk.getNFTCollection("${erc721.contractAddress}").setApprovalForToken("${this.getAddress()}", ${erc721.tokenId});\n\n`);
      }
      numOfRewardUnits.push("1");
      contents.push({
        assetContract: erc721.contractAddress,
        tokenType: 1,
        totalAmount: 1,
        tokenId: erc721.tokenId
      });
    }
    for (const erc1155 of erc1155Rewards) {
      const isApproved = await (0,_watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.cW)(this.contractWrapper.getProvider(), this.getAddress(), erc1155.contractAddress, erc1155.tokenId, owner);
      if (!isApproved) {
        throw new Error(`ERC1155 token "${erc1155.tokenId}" with contract address "${erc1155.contractAddress}" is not approved for transfer.\n\nYou can give approval the multiwrap contract to transfer this token by running:\n\nawait sdk.getEdition("${erc1155.contractAddress}").setApprovalForAll("${this.getAddress()}", true);\n\n`);
      }
      numOfRewardUnits.push(erc1155.totalRewards);
      contents.push({
        assetContract: erc1155.contractAddress,
        tokenType: 2,
        totalAmount: ethers__WEBPACK_IMPORTED_MODULE_12__.BigNumber.from(erc1155.quantityPerReward).mul(ethers__WEBPACK_IMPORTED_MODULE_12__.BigNumber.from(erc1155.totalRewards)),
        tokenId: erc1155.tokenId
      });
    }
    return {
      contents,
      numOfRewardUnits
    };
  }

  /**
   * @internal
   */
  async prepare(method, args, overrides) {
    return _watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.aT.fromContractWrapper({
      contractWrapper: this.contractWrapper,
      method,
      args,
      overrides
    });
  }

  /**
   * @internal
   */
  async call(functionName, args, overrides) {
    return this.contractWrapper.call(functionName, args, overrides);
  }
  detectVrf() {
    if ((0,_watchTransactions_8ceed2d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.bN)(this.contractWrapper, "PackVRF")) {
      return new PackVRF(this.contractWrapper.getSignerOrProvider(), this.contractWrapper.readContract.address, this.storage, this.contractWrapper.options, this.chainId);
    }
    return undefined;
  }
}
(0,_QueryParams_7d9473b5_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(Pack, "contractRoles", ["admin", "minter", "asset", "transfer"]);




/***/ }),

/***/ "./node_modules/@thirdweb-dev/contracts-js/dist/abis/ERC20.json":
/*!**********************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/contracts-js/dist/abis/ERC20.json ***!
  \**********************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}]');

/***/ })

}]);